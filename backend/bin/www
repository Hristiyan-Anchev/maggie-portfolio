#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var User = require("../models/UserModel");
var bcrypt = require("bcrypt");


// greenlock-express magic going on here
// const greenlock = require("greenlock-express")
//
// greenlock
//     .init({
//       packageRoot: process.cwd(),
//       configDir:"./greenlock.d",
//       //security contact
//       maintainerEmail:"hristian.anchev@gmail.com",
//       cluster:false
//     }).serve(app);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,seed);
server.on('error', onError);
server.on('listening', onListening);


//seed if no admin present seed in db
function seed(){

  const args = process.argv.slice(2);

  let adminPasswd = args[0];



  User.countDocuments(function (err,count){
    if(err){
      console.log("Problem getting user count");
    }else if(count === 0){
      bcrypt.hash(adminPasswd,10,function(err,hash){
        if(err){
          console.log("There was an error hashing your password! :: ",err);
        }else{
          User.create({username:process.env.ADMIN_USER,password:hash},
              function(err,user){
                if(err){
                  console.error(err.message);
                  console.error("An error occured while creating user: ");
                }else{
                  console.log("User: ",user.username," was created!");
                }
              }
          );
        }
      });
    }
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

}


